% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/dispatch.R
\name{subset_protntsite}
\alias{subset_protntsite}
\alias{subset_protntany}
\alias{subset_anyntsite}
\alias{subset_anyntany}
\alias{subset_anysite}
\alias{subset_protctsite}
\alias{subset_anyctsite}
\alias{subset_anyctany}
\title{Subsets proteins by variable modifications.}
\usage{
subset_protntsite(prps, site)

subset_protntany(prps)

subset_anyntsite(prps, site = "Q")

subset_anyntany(peps)

subset_anysite(prps, sites, min_n_res)

subset_protctsite(prps, site = "V")

subset_anyctsite(prps, site = "Q")

subset_anyctany(peps)
}
\arguments{
\item{prps}{Lists of peptide sequences with a one-letter representation of
amino acid residues. Each list is named by protein accession.}

\item{site}{A site. No need to specify "any terminal" sites.}

\item{min_n_res}{The minimum numbers of residues for a given set of sites.}
}
\description{
Flowchart (1-nt): `Dimethyl (Protein N-term = P)`

Flowchart (2-nt): `Acetyl (Protein N-term)`

Flowchart (3-nt): `Gln->pyro Glu (N-term = Q)`

Flowchart f(4-nt): `Acetyl (N-term)`

Flowchart (5): `Oxidation (M)`

Flowchart (1-ct): `Dehydrated (Protein C-term = N)`

Flowchart (3-ct): `Oxidation (C-term = G)`

Flowchart (4-ct): `Amidated (C-term)`
}
\examples{
\donttest{
## Protein N-term (Site)
sites <- list(`Dimethyl (Protein N-term = P)` = "P", 
              `Oxidation (M)` = "M", 
              `Deamidated (N)` = "N")
positions <- c("Protein N-term", "Anywhere", "Anywhere")
vmods <- purrr::map2(sites, positions, ~ setNames(.x, .y))

vmods <- unname(vmods)
vmods <- unlist(vmods, recursive = FALSE, use.names = TRUE)
posns <- names(vmods)

prps <- list(PROT_A = c("-MAKEMASSPECFUN", "-PAKEKASSPECFUN"), 
             PROT_B = c("PAKEKASSPECFUN", "NKAKEKASSPECFU", 
                        "-NKAKEKASSPECFU"))

subset_protntsite(prps, find_protntsite(vmods, posns))
} 
\donttest{
## Any N-term (Site)
sites <- list(`Dimethyl (N-term = P)` = "P", 
              `Oxidation (M)` = "M", 
              `Deamidated (N)` = "N")
positions <- c("Any N-term", "Anywhere", "Anywhere")
vmods <- purrr::map2(sites, positions, ~ setNames(.x, .y))

vmods <- unname(vmods)
vmods <- unlist(vmods, recursive = FALSE, use.names = TRUE)
posns <- names(vmods)

prps <- list(PROT_A = c("-MAKEMASSPECFUN", "-PAKEKASSPECFUN"), 
             PROT_B = c("PAKEKASSPECFUN", "NKAKEKASSPECFU", 
                        "-NKAKEKASSPECFU"))

# "-PAKEKASSPECFUN" went with `subset_protntsite` (see flow charts)
subset_anyntsite(prps, find_anyntsite(vmods, posns))
}
\donttest{
## Anywhere
min_n_res <- c(P = 1, M = 1, N = 1)

sites <- list(`Dimethyl (N-term = P)` = "P", 
              `Oxidation (M)` = "M", 
              `Deamidated (N)` = "N")
positions <- c("Any N-term", "Anywhere", "Anywhere")
vmods <- purrr::map2(sites, positions, ~ setNames(.x, .y))

vmods <- unname(vmods)
vmods <- unlist(vmods, recursive = FALSE, use.names = TRUE)

prps <- list(PROT_A = c("-MAKEMASSPECFUN", "-PAKEKASSPECFUN"), 
             PROT_B = c("PAKEKASSPECFUN", "NKAKEKASSPECFU", 
                        "-NKAKEKASSPECFU"))

# should contain both M and N
subset_anysite(prps, sites, min_n_res)

## Multiple mods to the same site
# (mimic from aa_masses)
min_n_res <- c(P = 1, M = 2, N = 1)

sites <- list(`Dimethyl (N-term = P)` = "P", 
              `Oxidation (M)` = "M", `Carbamyl (M)` = "M", 
              `Deamidated (N)` = "N")
positions <- c("Any N-term", "Anywhere", "Anywhere", "Anywhere")
vmods <- purrr::map2(sites, positions, ~ setNames(.x, .y))

# No need of modification names
vmods <- unname(vmods)
sites <- unname(sites)
vmods <- unlist(vmods, recursive = FALSE, use.names = TRUE)

is_same <- any(length(min_n_res) > 1L)
if (is_same) {
  ok <- !duplicated.default(vmods)
  vmods <- vmods[ok]
  sites <- sites[ok]
}

prps <- list(PROT_A = c("-MAKEMASSPECFUN", "-PAKEKASSPECFUN"), 
             PROT_B = c("PAKEKASSPECFUN", "NKAKEKASSPECFU", 
                        "-NKAKEKASSPECFU"))

ans <- subset_anysite(prps, sites, min_n_res)
}
}
