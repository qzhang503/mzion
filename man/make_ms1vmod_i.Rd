% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/vmod_ms1_labels.R
\name{make_ms1vmod_i}
\alias{make_ms1vmod_i}
\title{Makes the sets of MS1 labels for a given \code{aa_masses}.}
\usage{
make_ms1vmod_i(
  aa_masses = NULL,
  maxn_vmods_per_pep = 5L,
  maxn_sites_per_vmod = 3L
)
}
\arguments{
\item{aa_masses}{A named list containing the (mono-isotopic) masses of amino
acid residues.}

\item{maxn_vmods_per_pep}{A non-negative integer; the maximum number of
\code{Anywhere} (non-terminal) variable modifications per peptide. The
default is 5.}

\item{maxn_sites_per_vmod}{A non-negative integer; the maximum number of
  combinatorial \code{Anywhere} (non-terminal) variable modifications per
  site in a peptide sequence. The default is 3.

  For instance, variable modifications of \code{Carbamyl (M)} and
  \code{Oxidation (M)} both have site \code{M}. In order to have a
  combination of two \code{Carbamyl (M)} and two \code{Oxidation (M)} being
  considered, the value of \code{maxn_sites_per_vmod} needs to be four or
  greater.}
}
\description{
For \code{Anywhere} variable modifications (\code{amods}) across all
residues.
}
\details{
For the universe of labels, loops through \code{aa_masses_all}.

By the design of \code{aa_masses}, the \code{amods} in a \code{aa_masses} are
all realized. Therefore, each list in the resulted labels should contain at
least one of the \code{amods} residues from the \code{aa_masses}. For
example, if \code{amods} contain M, N and S, each list in the result should
contains at least one of the residues.

Currently, variable terminal modifications are exempted from the restriction
by \code{maxn_vmods_per_pep}. If taken into account (e.g. variable N-term),
the combination of \code{Anywhere} can be further reduced.
}
\examples{
\donttest{
library(mzion)

## Simple
fixedmods <- c("TMT6plex (N-term)", "TMT6plex (K)",
               "Carbamidomethyl (C)")

varmods = c("Acetyl (Protein N-term)", "Oxidation (M)",
            "Deamidated (N)",
            "Gln->pyro-Glu (N-term = Q)")

aa_masses_all <- calc_aamasses(fixedmods = fixedmods,
                               varmods = varmods,
                               maxn_vmods_setscombi = 64,
                               out_path = NULL)

maxn_vmods_per_pep <- 5L
maxn_sites_per_vmod <- 3L

ms1vmods_all <- lapply(aa_masses_all, mzion:::make_ms1vmod_i,
                       maxn_vmods_per_pep = maxn_vmods_per_pep,
                       maxn_sites_per_vmod = maxn_sites_per_vmod)

stopifnot(length(ms1vmods_all[[1]]) == 0L,
          length(ms1vmods_all[[2]]) == 0L,
          length(ms1vmods_all[[3]]) == 0L)

# (M, N)
len_ps <- lapply(ms1vmods_all[[12]], function (x) attr(x, "ps"))

# (M)
len_ps <- lapply(ms1vmods_all[[4]], function (x) attr(x, "ps"))

## More complex
fixedmods <- c("TMT6plex (N-term)", "TMT6plex (K)")

varmods <- c("Acetyl (Protein N-term)", "Deamidated (N)",
             "Oxidation (M)", "Carbamidomethyl (M)", "Carbamyl (M)",
             "Carbamidomethyl (S)", "Phospho (S)")

aa_masses_all <- calc_aamasses(fixedmods = fixedmods,
                               varmods = varmods,
                               maxn_vmods_setscombi = 64,
                               out_path = NULL)

maxn_vmods_per_pep <- 5L
maxn_sites_per_vmod <- 3L

ms1vmods_all <- lapply(aa_masses_all, mzion:::make_ms1vmod_i,
                       maxn_vmods_per_pep = maxn_vmods_per_pep,
                       maxn_sites_per_vmod = maxn_sites_per_vmod)

# No duplication within each aa_masses
any_dups <- lapply(ms1vmods_all, function (x) anyDuplicated(x))

stopifnot(all(unlist(any_dups) == 0L))

# Can have identical sets of labels at different aa_masses
identical(ms1vmods_all[[3]], ms1vmods_all[[9]])

attr(aa_masses_all[[3]], "tmod")
attr(aa_masses_all[[9]], "tmod")

ms1vmods <- ms1vmods_all[[64]]
n <- length(ms1vmods[[1]])


## "Oxidation (M)" on the N-term
fixedmods <- c("TMT6plex (N-term)", "TMT6plex (K)", "Carbamidomethyl (C)")

varmods = c("Acetyl (Protein N-term)", "Oxidation (M)", "Deamidated (N)",
            "Gln->pyro-Glu (N-term = Q)")

aa_masses_all <- calc_aamasses(fixedmods = fixedmods,
                               varmods = varmods,
                               maxn_vmods_setscombi = 64,
                               out_path = NULL)

maxn_vmods_per_pep <- 5L
maxn_sites_per_vmod <- 3L

ms1vmods_all <- lapply(aa_masses_all, mzion:::make_ms1vmod_i,
                       maxn_vmods_per_pep = maxn_vmods_per_pep,
                       maxn_sites_per_vmod = maxn_sites_per_vmod)
ms2vmods_all <- lapply(ms1vmods_all, function (x) lapply(x, mzion:::make_ms2vmods))

i <- 6L
aa_masses <- aa_masses_all[[i]]
amods <- attr(aa_masses, "amods")

ms1vmods <- ms1vmods_all[[i]]
ms2vmods <- ms2vmods_all[[i]]

aas <- unlist(strsplit("MHQGVMNVGMGQKNS", ""))

# Subset from ms1vmods by aas
oks <- mzion:::match_mvmods(aas = aas, ms1vmods = ms1vmods, amods = amods)$inds
ms2vmods <- ms2vmods[oks]

vmods_combi <- mzion:::find_vmodscombi(aas, ms2vmods)

# "Oxidation (M)" on N-term kept in the label space
lapply(vmods_combi, function (x) any(names(x) == 1))

# Otherwise check if any attr(aa_masses, "amods") in the N-term
amods <- attr(aa_masses, "amods")
# may do it during combi_byvmodsM(...)
}
}
