% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/vmod_labels.R
\name{make_ms1vmod_i}
\alias{make_ms1vmod_i}
\title{Makes the sets of labels for an \code{aa_masses}.}
\usage{
make_ms1vmod_i(
  aa_masses = NULL,
  maxn_vmods_per_pep = 5L,
  maxn_sites_per_vmod = 3L
)
}
\arguments{
\item{aa_masses}{A named list containing the (mono-isotopic) masses of amino
acid residues.}

\item{maxn_vmods_per_pep}{The maximum number of variable modifications per
peptide.}

\item{maxn_sites_per_vmod}{Integer; the maximum number of combinatorial
variable modifications per site in a per peptide sequence.}
}
\description{
For \code{Anywhere} variable modifications (\code{amods}) across all
residues.
}
\details{
For the universe of labels, loops through \code{aa_masses_all} and the
indexes of lists are in one-to-one correspondence to \code{aa_masses_all}.

By the design of \code{aa_masses}, the \code{amods} in a \code{aa_masses} are
all realized. Therefore, each list in the resulted labels should contain at
least one of the \code{amods} residues from the \code{aa_masses}. For
example, if \code{amods} contain M, N and S, each list in the result should
contains at least one of the residues.
}
\examples{
\donttest{
## Simple
fixedmods <- c("TMT6plex (N-term)", "TMT6plex (K)", 
               "Carbamidomethyl (C)")

varmods = c("Acetyl (Protein N-term)", "Oxidation (M)", 
            "Deamidated (N)",
            "Gln->pyro-Glu (N-term = Q)")

aa_masses_all <- calc_aamasses(fixedmods = fixedmods,
                               varmods = varmods,
                               maxn_vmods_setscombi = 64,
                               add_varmasses = FALSE,
                               add_nlmasses = FALSE,
                               exclude_phospho_nl = TRUE,
                               out_path = NULL)

maxn_vmods_per_pep <- 5L
maxn_sites_per_vmod <- 3L

ms1vmods_all <- lapply(aa_masses_all, make_ms1vmod_i,
                       maxn_vmods_per_pep = maxn_vmods_per_pep,
                       maxn_sites_per_vmod = maxn_sites_per_vmod)

stopifnot(length(ms1vmods_all[[1]]) == 0L,
          length(ms1vmods_all[[2]]) == 0L,
          length(ms1vmods_all[[3]]) == 0L)

# M, N
len_ps <- lapply(ms1vmods_all[[12]], function (x) attr(x, "ps"))

# M
len_ps <- lapply(ms1vmods_all[[4]], function (x) attr(x, "ps"))

## More complex
fixedmods <- c("TMT6plex (N-term)", "TMT6plex (K)")

varmods <- c("Acetyl (Protein N-term)", "Deamidated (N)",
             "Oxidation (M)", "Carbamidomethyl (M)", "Carbamyl (M)",
             "Carbamidomethyl (S)", "Phospho (S)")

aa_masses_all <- calc_aamasses(fixedmods = fixedmods,
                               varmods = varmods,
                               maxn_vmods_setscombi = 64,
                               add_varmasses = FALSE,
                               add_nlmasses = FALSE,
                               exclude_phospho_nl = TRUE,
                               out_path = NULL)

maxn_vmods_per_pep <- 5L
maxn_sites_per_vmod <- 3L

ms1vmods_all <- lapply(aa_masses_all, make_ms1vmod_i,
                       maxn_vmods_per_pep = maxn_vmods_per_pep,
                       maxn_sites_per_vmod = maxn_sites_per_vmod)

# No duplication within each aa_masses
any_dups <- lapply(ms1vmods_all, 
                   function (x) anyDuplicated(x))

stopifnot(all(unlist(any_dups) == 0L))

# Can have identical sets of labels at different aa_masses
identical(ms1vmods_all[[3]], ms1vmods_all[[9]])

attr(aa_masses_all[[3]], "tmod")
attr(aa_masses_all[[9]], "tmod")

# For each aa_masses, finds 'n' (the number of lables) 
#  from the base entry
lapply(ms1vmods_all, `[[`, 1)

ms1vmods_64 <- ms1vmods_all[[64]]
n <- length(ms1vmods_64[[1]])
}
}
