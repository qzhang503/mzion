% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/utils_ui.R
\name{calc_ms2ions}
\alias{calc_ms2ions}
\title{Calculates the masses of MS2 ion series.}
\usage{
calc_ms2ions(
  aa_seq,
  aa_masses,
  ms1_mass = NULL,
  mod_indexes = NULL,
  type_ms2ions = "by",
  maxn_vmods_per_pep = 5L,
  maxn_sites_per_vmod = 3L,
  maxn_vmods_sitescombi_per_pep = 64L,
  maxn_fnl_per_seq = 3L,
  maxn_vnl_per_seq = 3L,
  digits = 4L
)
}
\arguments{
\item{aa_seq}{Character string; a peptide sequences with one-letter
representation of amino acids.}

\item{aa_masses}{A named list containing the (mono-isotopic) masses of amino
acid residues.}

\item{ms1_mass}{The mass of a theoretical MS1 (for subsetting).}

\item{mod_indexes}{Integer; the indexes of fixed and/or variable
modifications.}

\item{type_ms2ions}{Character; the type of
\href{http://www.matrixscience.com/help/fragmentation_help.html}{ MS2
ions}. Values are in one of "by", "ax" and "cz". The default is "by" for b-
and y-ions.}

\item{maxn_vmods_per_pep}{The maximum number of variable modifications per
peptide.}

\item{maxn_sites_per_vmod}{Integer; the maximum number of combinatorial
variable modifications per site in a per peptide sequence.}

\item{maxn_vmods_sitescombi_per_pep}{Integer; the maximum number of
combinatorial variable modifications per peptide sequence.}

\item{maxn_fnl_per_seq}{A non-negative integer; the maximum number of
permutative neutral losses per peptide sequence for fixed modifications.}

\item{maxn_vnl_per_seq}{A non-negative integer; the maximum number of
permutative neutral losses per peptide sequence for variable modifications.}

\item{digits}{Integer; the number of decimal places to be used.}
}
\description{
For a given type of fragmentation. Minimal error handling for speeds.
}
\examples{
\donttest{
library(mzion)
library(magrittr)

## No variable modifications
# (1)
fixedmods <- NULL
varmods <- NULL

mod_indexes <- seq_along(c(fixedmods, varmods)) \%>\%
  as.hexmode() \%>\%
  `names<-`(c(fixedmods, varmods))
aa_masses_all <- calc_aamasses(fixedmods, varmods)

x <- mzion:::calc_ms2ions("MAKEMASSPECFUN", aa_masses_all[[1]], NULL, mod_indexes)

}
}
