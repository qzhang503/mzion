% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/msmsmatches.R
\name{matchMS}
\alias{matchMS}
\title{An integrated facility for searches of mass spectrometry data.}
\usage{
matchMS(
  out_path = "~/mzion/outs",
  mgf_path = file.path(out_path, "mgf"),
  fasta = c("~/mzion/dbs/fasta/uniprot/uniprot_hs_2020_05.fasta",
    "~/mzion/dbs/fasta/crap/crap.fasta"),
  acc_type = c("uniprot_acc", "other"),
  acc_pattern = NULL,
  fixedmods = c("TMT6plex (N-term)", "TMT6plex (K)", "Carbamidomethyl (C)"),
  varmods = c("Acetyl (Protein N-term)", "Oxidation (M)", "Deamidated (N)",
    "Gln->pyro-Glu (N-term = Q)"),
  rm_dup_term_anywhere = TRUE,
  ms1_neulosses = NULL,
  maxn_neulosses_fnl = 2L,
  maxn_neulosses_vnl = 2L,
  fixedlabs = NULL,
  varlabs = NULL,
  locmods = c("Phospho (S)", "Phospho (T)", "Phospho (Y)"),
  mod_motifs = NULL,
  enzyme = c("Trypsin_P", "Trypsin", "LysC", "LysN", "ArgC", "LysC_P", "Chymotrypsin",
    "GluC", "GluN", "AspC", "AspN", "SemiTrypsin_P", "SemiTrypsin", "SemiLysC",
    "SemiLysN", "SemiArgC", "SemiLysC_P", "SemiChymotrypsin", "SemiGluC", "SemiGluN",
    "SemiAspC", "SemiAspN", "Noenzyme", "Nodigest"),
  custom_enzyme = c(Cterm = NULL, Nterm = NULL),
  nes_fdr_group = c("base", "base_cterm_tryptic", "base_cterm_nontryptic", "all",
    "all_cterm_tryptic", "all_cterm_nontryptic", "top3", "top3_cterm_tryptic",
    "top3_cterm_nontryptic"),
  noenzyme_maxn = 0L,
  maxn_fasta_seqs = 200000L,
  maxn_vmods_setscombi = 512L,
  maxn_vmods_per_pep = 5L,
  maxn_sites_per_vmod = 3L,
  maxn_fnl_per_seq = 3L,
  maxn_vnl_per_seq = 3L,
  maxn_vmods_sitescombi_per_pep = 64L,
  min_len = 7L,
  max_len = 40L,
  max_miss = 2L,
  min_mass = 200L,
  max_mass = 4500L,
  ppm_ms1 = 20L,
  n_13c = 0L,
  ms1_notches = 0,
  par_groups = NULL,
  silac_mix = NULL,
  type_ms2ions = "by",
  min_ms2mass = 115L,
  max_ms2mass = 4500L,
  minn_ms2 = 6L,
  ppm_ms2 = 20L,
  tmt_reporter_lower = 126.1,
  tmt_reporter_upper = 135.2,
  exclude_reporter_region = FALSE,
  ppm_reporters = 10L,
  quant = c("none", "tmt6", "tmt10", "tmt11", "tmt16", "tmt18"),
  use_lfq_intensity = TRUE,
  target_fdr = 0.01,
  fdr_type = c("protein", "peptide", "psm"),
  fdr_group = c("base", "all", "top3"),
  max_pepscores_co = 70,
  min_pepscores_co = 0,
  max_protscores_co = Inf,
  max_protnpep_co = 10L,
  method_prot_es_co = c("median", "mean", "max", "min"),
  soft_secions = FALSE,
  topn_mods_per_seq = 1L,
  topn_seqs_per_query = 1L,
  combine_tier_three = FALSE,
  max_n_prots = 60000L,
  use_ms1_cache = TRUE,
  .path_cache = "~/mzion/.MSearches (1.3.0.1)/Cache/Calls",
  .path_fasta = NULL,
  deisotope_ms2 = TRUE,
  max_ms2_charge = 3L,
  n_mdda_flanks = 6L,
  maxn_mdda_precurs = 1L,
  ppm_ms1_deisotope = 8L,
  ppm_ms2_deisotope = 8L,
  grad_isotope = 1.6,
  fct_iso2 = 3,
  use_defpeaks = FALSE,
  maxn_dia_precurs = 1000L,
  n_dia_ms2bins = 1L,
  n_dia_scans = 4L,
  topn_dia_ms2ions = 2400L,
  delayed_diams2_tracing = FALSE,
  topn_ms2ions = 150L,
  topn_ms2ion_cuts = NA,
  min_ms1_charge = 2L,
  max_ms1_charge = 4L,
  min_scan_num = 1L,
  max_scan_num = .Machine$integer.max,
  min_ret_time = 0,
  max_ret_time = Inf,
  calib_ms1mass = FALSE,
  ppm_ms1calib = 20L,
  ppm_ms2calib = 20L,
  add_ms2theos = FALSE,
  add_ms2theos2 = FALSE,
  add_ms2moverzs = FALSE,
  add_ms2ints = FALSE,
  svm_reproc = FALSE,
  svm_kernel = "radial",
  svm_feats = c("pep_score", "pep_ret_range", "pep_delta", "pep_n_ms2", "pep_expect",
    "pep_exp_mz", "pep_exp_mr", "pep_tot_int", "pep_n_matches2", "pep_ms2_deltas_mean"),
  svm_cv = TRUE,
  svm_k = 3L,
  svm_costs = c(0.1, 0.3, 1, 3, 10),
  svm_def_cost = 1,
  svm_iters = 10L,
  make_speclib = FALSE,
  digits = 4L,
  ...
)
}
\arguments{
\item{out_path}{A file path of outputs.}

\item{mgf_path}{A file path to a list of MGF files. The experimenter needs to
  supply the files.

  The supported MGFs are in the formats of (1) MSConvert against \code{.raw}
  from Thermo's Orbitrap or \code{.d} from Bruker's timsTOF Pro, (2) Thermo's
  Proteome Discoverer or (3) Bruker's DataAnalysis.

  With MSConvert, the default \code{titleMaker} is required for correct
  parsing (don't think it can be altered by users, but just in case).}

\item{fasta}{Character string(s) to the name(s) of fasta file(s) with
prepended directory path. The experimenter needs to supply the files.}

\item{acc_type}{Character string(s); the types of protein accessions in one
of c("uniprot_acc", "uniprot_id", "refseq_acc", "other"). For custom names,
the corresponding regular expressions need to be supplied via argument
\code{acc_pattern}.}

\item{acc_pattern}{Regular expression(s) describing the patterns in
separating the header lines of fasta entries. At the \code{NULL} default,
the pattern will be automated when \code{acc_type} are among
c("uniprot_acc", "uniprot_id", "refseq_acc", "other"). See also
\link{load_fasta2} for custom examples.}

\item{fixedmods}{Character string(s) of fixed modifications.}

\item{varmods}{Character string(s) of variable modifications. Multiple
  modifications to the same residue are allowed, for example, both
  \code{Carbamyl (M)} and \code{Oxidation (M)}.

  For both \code{fixedmods} and \code{varmods}, the modification title,
  \code{TMT6plex}, applies to all of TMT-6, TMT-10, TMT-11. It is also
  possible to use aliased: (1) \code{TMT10plex} for TMT-10 and
  \code{TMT11plex} for TMT-11 and (2) \code{TMT16plex} for TMTpro. See also
  \link{parse_unimod} for grammars of modification \code{title},
  \code{position} and \code{site}.}

\item{rm_dup_term_anywhere}{Logical; if TRUE, removes combinations in
variable modifications with site(s) in positions of both terminal and
anywhere, e.g., "Gln->pyro-Glu (N-term = Q)" and "Deamidated (Q).}

\item{ms1_neulosses}{Character string(s) specifying the neutral losses of
  precursors. The nomenclature is the same as those in argument
  \code{varmods}, e.g., \code{c("Phospho (S)", "Phospho (T)", "Phospho
  (Y)")}.

  The argument is a simplified (narrower) usage of argument
  \code{ms1_notches} with additional specificity in modifications and sites.}

\item{maxn_neulosses_fnl}{A positive integer used in conjunction with
arguments \code{ms1_notches} and \code{ms1_neulosses}. The maximum number
of fixed MS2 neutral losses to be considered when searching against peak
lists with MS1 mass off-sets. The default is two (one MS2 neutral loss in
addition to 0).}

\item{maxn_neulosses_vnl}{A positive integer used in conjunction with
arguments \code{ms1_notches} and \code{ms1_neulosses}. The maximum number
of variable MS2 neutral losses to be considered when searching against peak
lists with MS1 mass off-sets. The default is two (one MS2 neutral loss in
addition to 0).}

\item{fixedlabs}{Character string(s) of fixed isotopic labels. See examples
of SILAC for details. Can be but not typically used in standard alone
searches of labeled residues.}

\item{varlabs}{Character string(s) of variable isotopic labels. See examples
of SILAC for details. Can be but not typically used in standard alone
searches of labeled residues.}

\item{locmods}{Among \code{varmods} for the consideration of localization
  probabilities; for instance, \code{locmods = NULL} for nothing,
  \code{locmods = c("Phospho (S)", "Phospho (T)", "Phospho (Y)")} for
  phosphopeptides, \code{locmods = "Acetyl (K)"} for lysine acetylation.
  \code{fixedmods} that were coerced to \code{varmods} will be added
  automatically to \code{locmods}.

  For convenience, the default is set to look for applicable peptide
  phosphorylation (and may encounter warning messages if the data type is
  different to the default).}

\item{mod_motifs}{The motifs to restrict \code{Anywhere} variable
modification. For example, provided the \code{Anywhere} variable
modifications containing \code{c("Oxidation (M)", "Deamidated (N)")} and
\code{mod_motifs = list(`Deamidated (N)` = c("NG", "NM"), `Oxidation (M)` =
c("NM", "MP"))},
variable modifications will only be considered at sites that satisfy the
motifs.}

\item{enzyme}{A character string; the proteolytic specificity of the assumed
enzyme will be used to generate peptide sequences from protein entries. The
default is \code{Trypsin_P}. See also parameter \code{custom_enzyme}.}

\item{custom_enzyme}{Regular expression(s) for custom enzyme specificity. The
  default is NULL. Uses of custom enzyme specificity is probably rather
  infrequent. Should there be such need, the argument \code{enzyme} will be
  ignored and the following may be applied:

  \cr ## Examples \cr \cr # Equivalent to Trypsin \cr # at the Cterm of K or
  R but not followed by P \cr # (the quantifiers "\{1\}" can be skipped at a
  small cost of speed) \cr custom_enzyme = c(Cterm =
  "([KR]\{1\})([^P]\{1\})")

  \cr # GluN again \cr custom_enzyme = c(Nterm = "([E]\{1\})")

  \cr # Trypsin_P + GluN \cr custom_enzyme = c(Cterm = "([KR]\{1\})", Nterm =
  "([E]\{1\})")

  \cr # Faked: Trypsin, proline not allowed on neither Nterm or Cterm \cr
  custom_enzyme = c(Cterm = "([KR]\{1\})([^P]\{1\})", Nterm =
  "([^P]\{1\})([KR]\{1\})")}

\item{nes_fdr_group}{A character string in one of \code{c("all",
"all_cterm_tryptic", "all_cterm_nontryptic", "base", "base_cterm_tryptic",
"base_cterm_nontryptic")}. All peptides will be used in the classifications
of targets and decoys at \code{"all"}. Peptides with the chemistry of
C-terminal K or R will be used at \code{"all_cterm_tryptic"} (peptides from
protein C-terminals being excluded). Peptides without C-terminal K or R
will be used at \code{"all_cterm_nontryptic"}. The same applied to
\code{"base_cterm_tryptic"} and \code{"base_cterm_nontryptic"} with the
difference of only peptides from the \code{base} group being used. See also
parameter \code{fdr_group}.}

\item{noenzyme_maxn}{Non-negative integer; the maximum number of peptide
lengths for sectional searches at \code{noenzyme} specificity. The argument
may be used to guard against RAM exhaustion. At the zero default, The
peptide lengths from \code{min_len} to \code{max_len} will be broken
automatically into continuous sections. At value 1, searches will be
performed against individual peptide lengths; at value 2, two adjacent
lengths will be taken at a time, etc.}

\item{maxn_fasta_seqs}{A positive integer; the maximum number of protein
sequences in fasta files. The default is 200000.}

\item{maxn_vmods_setscombi}{A non-negative integer; the maximum number of
sets of combinatorial variable modifications. The default is 512.}

\item{maxn_vmods_per_pep}{A non-negative integer; the maximum number of
\code{Anywhere} (non-terminal) variable modifications per peptide. The
default is 5.}

\item{maxn_sites_per_vmod}{A non-negative integer; the maximum number of
  combinatorial \code{Anywhere} (non-terminal) variable modifications per
  site in a peptide sequence. The default is 3.

  For instance, variable modifications of \code{Carbamyl (M)} and
  \code{Oxidation (M)} both have site \code{M}. In order to have a
  combination of two \code{Carbamyl (M)} and two \code{Oxidation (M)} being
  considered, the value of \code{maxn_sites_per_vmod} needs to be four or
  greater.}

\item{maxn_fnl_per_seq}{A non-negative integer; the maximum number of
permutative neutral losses per peptide sequence for fixed modifications. To
bypass the combinatorial of neutral losses, set \code{maxn_fnl_per_seq = 1}
or \code{0}.}

\item{maxn_vnl_per_seq}{A non-negative integer; the maximum number of
permutative neutral losses per peptide sequence for variable modifications.
To bypass the combinatorial of neutral losses, set \code{maxn_vnl_per_seq =
1} or \code{0}.}

\item{maxn_vmods_sitescombi_per_pep}{A non-negative integer; the maximum
number of combinatorial variable modifications per peptide sequence (per
module). The ways include the permutations in neutral losses and
modifications (e.g., \code{Acetyl (K) and TMT (K)}).}

\item{min_len}{A positive integer; the minimum length of peptide sequences
for considerations. Shorter peptides will be excluded. The default is 7.}

\item{max_len}{A positive integer; the maximum length of peptide sequences
for considerations. Longer peptides will be excluded. The default is 40.}

\item{max_miss}{A non-negative integer; the maximum number of mis-cleavages
per peptide sequence for considerations. The default is 2.}

\item{min_mass}{A positive integer; the minimum precursor mass for
interrogation. The default is an arbitrarily low value (the primary guard
against low molecular-weight precursors is \code{min_len}).}

\item{max_mass}{A positive integer; the maximum precursor mass for
interrogation.}

\item{ppm_ms1}{A positive integer; the mass tolerance of MS1 species. The
default is 20.}

\item{n_13c}{Number(s) of 13C off-sets in precursor masses, for example, over
the range of \code{-1:2}. The default is 0.}

\item{ms1_notches}{A numeric vector; notches (off-sets) in precursor masses,
e.g., \code{c(-97.976896)} to account fo the loss of a phosphoric acid in
precursor masses.}

\item{par_groups}{A low-priority feature. Parameter(s) of \code{matchMS}
multiplied by sets of values in groups. Multiple searches will be performed
separately against the parameter groups. For instance with one set of
samples in SILAC light and the other in SILAC heavy, the experimenters may
specify two arguments for parameter \code{mgf_path} and two arguments for
parameter \code{fixedmods} that link to the respective samples. In this
way, there is no need to search against, e.g. heavy-isotope-labeled K8R10
with the light samples and vice versa. Note that results will be combined
at the end, with the group names indicated under column \code{pep_group}.
The default is NULL without grouped searches. See the examples under SILAC
and Group searches.}

\item{silac_mix}{A list of labels indicating SILAC groups in samples. The
parameter is most relevant for SILAC experiments where peptides of heavy,
light etc. were \emph{mixed} into one sample. The default is NULL
indicating a none mixed-SILAC experiment. See also the examples under
SILAC.}

\item{type_ms2ions}{Character; the type of
\href{http://www.matrixscience.com/help/fragmentation_help.html}{ MS2
ions}. Values are in one of "by", "ax" and "cz". The default is "by" for b-
and y-ions.}

\item{min_ms2mass}{A positive integer; the minimum MS2 mass for
interrogation. The default is 110.}

\item{max_ms2mass}{A positive integer; the maximum MS2 mass for
interrogation.}

\item{minn_ms2}{A positive integer; the minimum number of matched MS2 ions
for consideration as a hit. Counts of secondary ions, e.g. b0, b* etc., are
not part of the threshold.}

\item{ppm_ms2}{A positive integer; the mass tolerance of MS2 species. The
default is 20.}

\item{tmt_reporter_lower}{The lower bound of the region of TMT reporter ions.
The default is \eqn{126.1}.}

\item{tmt_reporter_upper}{The upper bound of the region of TMT reporter ions.
The default is \eqn{135.2}.}

\item{exclude_reporter_region}{Logical; if TRUE, excludes MS2 ions in the
region of TMT reporter ions. The default is FALSE. The corresponding range
of TMT reporter ions is informed by \code{tmt_reporter_lower} and
\code{tmt_reporter_upper}. The argument affects only TMT data.}

\item{ppm_reporters}{A positive integer; the mass tolerance of MS2 reporter
ions. The default is 10.}

\item{quant}{A character string; the quantitation method. The default is
"none". Additional choices include \code{tmt6, tmt10, tmt11, tmt16 and
tmt18}. For other multiplicities of \code{tmt}, use the compatible higher
plexes. For example, apply \code{tmt16} for \code{tmt12} provided a set of
12-plexes being constructed from a 16-plex TMTpro \eqn{(7 * 13C + 2 *
15N)}. It is also possible that an experimenter may construct a
\code{tmt12} from a 18-plex TMTpro \eqn{(8 *13C + 1 * 15N)} where
\code{quant = tmt18} is suitable.}

\item{use_lfq_intensity}{Logical; if TRUE, replace spectrum-centric precursor
intensities with peptide-centric intensities in DDA-MS. Require mzML data
format. The feature enables LFQ and can also be applied to TMT experiments.}

\item{target_fdr}{A numeric; the targeted false-discovery rate (FDR) at the
levels of PSM, peptide or protein. The default is 0.01. See also argument
\code{fdr_type}.}

\item{fdr_type}{A character string; the type of FDR control. The value is in
  one of c("protein", "peptide", "psm"). The default is \code{protein}.

  Note that \code{fdr_type = protein} is comparable to \code{fdr_type =
  peptide} with the additional filtration of data at \code{prot_tier == 1}.}

\item{fdr_group}{A character string; the modification group(s) for uses in
peptide FDR controls. The value is in one of \code{c("all", "base")}. The
\code{base} corresponds to the modification group with the largest number
of matches.}

\item{max_pepscores_co}{A positive numeric; the upper limit in the cut-offs
of peptide scores for discriminating significant and insignificant
identities.}

\item{min_pepscores_co}{A non-negative numeric; the lower limit in the
cut-offs of peptide scores for discriminating significant and insignificant
identities.}

\item{max_protscores_co}{A positive numeric; the upper limit in the cut-offs
of protein scores for discriminating significant and insignificant
identities.  For higher quality and data-driven thresholds, choose the
default \code{max_protscores_co = Inf}.}

\item{max_protnpep_co}{A positive integer; the maximum number of peptides
under a protein (\code{prot_n_pep}) to warrant the protein significance.
For instance, proteins with \code{prot_n_pep > max_protnpep_co} will have a
protein significance score cutoff of zero and thus are significant. Choose
\code{max_protnpep_co = Inf} to learn automatically the cut-off from data.
Note that the the value of \code{prot_n_pep} includes the counts of shared
peptides.}

\item{method_prot_es_co}{A low-priority setting. A character string; the
method to calculate the cut-offs of protein enrichment scores. The value is
in one of \code{"median", "mean", "max", "min"} with the default of
\code{"median"}. For instance at the default, the median of
\code{peptide_score - pep_score_cutoff} under a protein will be used to
represent the threshold of a protein enrichment score. For more conserved
thresholds, the statistics of \code{"max"} may be considered.}

\item{soft_secions}{Logical; if TRUE, collapses the intensities of secondary
ions to primary ions even when the primaries are absent. The default is
FALSE. For instance, the signal of \code{b5^*} will be ignored if its
primary ion \code{b5} is not matched. The impacts of \code{soft_secions =
TRUE} on search performance has not yet been assessed.}

\item{topn_mods_per_seq}{Positive integer; a threshold to discard variable
  modifications under the same peptide match with scores beyond the top-n.

  The same \code{peptide match} refers to matches with identities in \code{MS
  scan number}, \code{MS raw file name} and \code{peptide sequence}. Target
  and decoys matches are treated separately.

  For a variable modification with multiple neutral losses (NL), the
  best-scored NL will be used in the ranking.}

\item{topn_seqs_per_query}{Positive integer; a threshold to discard peptide
  matches under the same MS query with scores beyond the top-n.

  The same \code{MS query} refers to the identity in \code{MS scan number}
  and \code{MS raw file name}. Target and decoys matches are treated
  separately.}

\item{combine_tier_three}{Logical; if TRUE, combines search results at tier-3
  to tier-1 to form the single output of \code{psmQ.txt}. The default is
  FALSE in that data will be segregated into the three quality tiers (shown
  below) by the choice of \code{fdr_type}. Note that the argument affects
  only at the \code{fdr_type} of \code{psm} or \code{peptide} where there are
  no tier-2 outputs. In general, the tier-3 results correspond to
  one-hit-wonders and setting \code{combine_tier_three = TRUE} is
  discouraged.

  In subproteome analysis, such as phosphoproteome analysis, some proteins
  may be well established globally, but fail the significance assessment by
  protein FDR on the local scale. In situations like this, it may be suitable
  to apply \code{fdr_type = "peptide"} or \code{fdr_type = "psm"} other than
  incurring \code{combine_tier_three = TRUE}.

  Tier-1: both proteins and peptides with scores above significance
  thresholds.

  Tier-2: \eqn{\ge} 2 significant peptides but protein scores below
  significance thresholds.

  Tier-3: one significant peptide per protein and protein scores below
  significance thresholds.}

\item{max_n_prots}{Softly depreciated. A positive integer to threshold the
  maximum number of protein entries before coercing \code{fdr_type} from
  \code{psm} or \code{peptide} to \code{protein}. The argument has no effect
  if \code{fdr_type} is already \code{protein}. In general, there is no need
  to change the default.

  Note that for memory efficiency proteins at tiers 1, 2 and 3 are grouped
  separately. Further note that there is no tier-2 proteins at
  \code{fdr_type} of \code{psm} or \code{peptide}. For very large data sets,
  a lower value of \code{max_n_prots} can be used to reduce the chance of
  memory exhaustion by setting aside some protein entries from tier 1 to 2.}

\item{use_ms1_cache}{Logical; at the TRUE default, use cached precursor
  masses.

  Set \code{use_ms1_cache = TRUE} for reprocessing of data, e.g., from
  \code{fdr_type = psm} to \code{fdr_type = protein}.}

\item{.path_cache}{The file path of cached search parameters. The parameter
is for the users' awareness of the underlying structure of file folders and
the use of default is suggested. Occasionally experimenters may remove the
file folder for disk space or under infrequent events of modified framework
incurred by the developer.}

\item{.path_fasta}{The parent file path to the theoretical masses of MS1
precursors. At the NULL default, the path is \code{gsub("(.*)\\.[^\\.]*$",
"\\1", get("fasta", envir = environment())[1])}. The parameter is for the
users' awareness of the structure of file folders and the use of default is
suggested. Occasionally experimenters may remove the file folder for disk
space or under infrequent events of modified framework incurred by the
developer.}

\item{deisotope_ms2}{Logical; if TRUE, de-isotope MS2 features.}

\item{max_ms2_charge}{Maximum charge states for consideration with MS2
deisotoping.}

\item{n_mdda_flanks}{The number of preceding and following MS1 scans for
consideration when averaging isotope envelops of precursors.}

\item{maxn_mdda_precurs}{Maximum number of precursors for consideration in a
multi-precursor DDA scan. Note that at \code{maxn_mdda_precurs = 1}, it is
equivalent to DDA with precursor re-deisotoping. At \code{maxn_mdda_precurs
= 0}, it is equivalent to DDA using the original monoisotopic masses and
charge states provided by a peak-picking algorithm (e.g., MSConvert).}

\item{ppm_ms1_deisotope}{Mass error tolerance in MS1 deisotoping.}

\item{ppm_ms2_deisotope}{Mass error tolerance in MS2 deisotoping.}

\item{grad_isotope}{Positive numeric; the gradient threshold between two
adjacent peaks in an isotopic envelop. The smaller the value, the more
stringent it is in calling an adjacent peak being a mono-isotopic
precursor.}

\item{fct_iso2}{A multiplication factor for the fuzzy discrimination of a
secondary precursor in parallel to a primary precursor in an isotopic
envelop. The smaller the value, the more stringent it is in calling an
adjacent peak being a mono-isotopic precursor}

\item{use_defpeaks}{Depreciated. Logical; if TRUE, uses MS1 m-over-z's,
intensities and charge states pre-calculated by other peak-picking
algorithms.}

\item{maxn_dia_precurs}{Maximum number of DIA precursors.}

\item{n_dia_ms2bins}{Allowance in adjacent DIA-MS2 bins for retention time
alignment with a DIA-MS1.}

\item{n_dia_scans}{Allowance in the number of adjacent MS scans for
constructing a peak profile and thus for determining the apex scan number
of an moverz value along LC.}

\item{topn_dia_ms2ions}{Top-N DIA-MS2 features (for deisotoping). For
example, 100 features per Th of isolation window (2400 for an isolation
windown of 24Th).}

\item{delayed_diams2_tracing}{Logical; if TRUE, delays the tracing of MS1-MS2
after ion matches.}

\item{topn_ms2ions}{A positive integer; the top-n species for uses in MS2 ion
searches.}

\item{topn_ms2ion_cuts}{Advanced feature. Either \code{NA} or a named vector.
  For instance, at \code{topn_ms2ions = 100} and \code{topn_ms2ion_cuts =
  c(`1000` = 90, `1100` = 5, `4500` = 5)}, the maximum number of MS2 peaks
  that can be used is \eqn{90} at \eqn{m/z \le 1000}, \eqn{5} at \eqn{1000 <
  m/z < 1100} and \code{5} at \eqn{m/z > 1100}. The trailing \code{`4500` =
  5} can be skipped.

  To exclude MS2 features such as at \eqn{m/z > 4500}: \code{topn_ms2ion_cuts
  = c(`4500` = 100)}.

  It is also possible to make a zone of voids. For instance, features at
  \eqn{1200 < m/z < 1250} can be excluded at \code{topn_ms2ion_cuts =
  c(`1000` = 90, `1200` = 5, `1250` = 0)}.

  The default is \code{NA} where \code{topn_ms2ions} are picked uniformly
  across the entire m/z range.}

\item{min_ms1_charge}{A positive integer; the minimum MS1 charge state for
considerations. The default is 2.}

\item{max_ms1_charge}{A positive integer; the maximum MS1 charge state for
considerations. The default is 6.}

\item{min_scan_num}{Depreciated. A positive integer; the minimum scan number
for considerations. The default is 1. The setting only applies to MGFs with
numeric scan numbers. For example, it has no effects on Bruker's timsTOF
data.}

\item{max_scan_num}{Depreciated. A positive integer; the maximum scan number
for considerations. The default is the maximum machine integer. The setting
only applies to MGFs with numeric scan numbers.}

\item{min_ret_time}{A non-negative numeric; the minimum retention time in
seconds for considerations. The default is 0.}

\item{max_ret_time}{Numeric; the maximum retention time in seconds for
considerations. The default is \code{Inf}. At a negative value, e.g. -800,
data in the last 800s of LC retention time will be excluded.}

\item{calib_ms1mass}{Logical; if TRUE, calibrates precursor masses.}

\item{ppm_ms1calib}{A positive integer; the mass tolerance of MS1 species for
precursor mass calibration. The argument has no effect at
\code{calib_ms1mass = FALSE}.}

\item{ppm_ms2calib}{A positive integer; the mass tolerance of MS2 species in
calibration searches.}

\item{add_ms2theos}{Logical. If true, adds the sequence of primary
  theoretical MS2 m/z values (\code{pep_ms2_theos}). The sequence order at a
  given \code{type_ms2ions} is:

  \tabular{ll}{ \strong{Type}   \tab \strong{Sequence}\cr by \tab \eqn{b1,
  b2..., y1, y2...} \cr ax \tab \eqn{a1, a2..., x1, x2...} \cr cz \tab
  \eqn{c1, c2..., z1, z2...} \cr }}

\item{add_ms2theos2}{Logical. If true, adds the sequence of secondary
  theoretical MS2 m/z values (\code{pep_ms2_theos2}). The sequence order at a
  given \code{type_ms2ions} is:

  \tabular{ll}{ \strong{Type}   \tab \strong{Order of sequences}\cr by \tab
  \eqn{b2, b*, b*2, b0, b02, y2, y*, y*2, y0, y02} \cr ax \tab \eqn{a2, a*,
  a*2, a0, a02, x2} \cr cz \tab \eqn{c2, z2} \cr }}

\item{add_ms2moverzs}{Logical; if TRUE, adds the sequence of experimental
\eqn{m/z} values (\code{pep_ms2_moverzs}).}

\item{add_ms2ints}{Logical; if TRUE, adds the sequence of experimental MS2
intensity values (\code{pep_ms2_ints}).}

\item{svm_reproc}{Logical; if TRUE, reprocesses peptide data for significance
thresholds with a support vector machine (SVM) approach analogous to
\href{https://www.nature.com/articles/nmeth1113}{Percolator}.}

\item{svm_kernel}{The SVM kernel. See also \link[e1071]{svm}.}

\item{svm_feats}{Features used for SVM classifications.}

\item{svm_cv}{Logical; if TRUE, performs cross validation for the
regularization cost.}

\item{svm_k}{A positive integer; specifies the k-number of folds in cross
validation.}

\item{svm_costs}{The cost constraints for k-fold cross validation.}

\item{svm_def_cost}{The default cost for SVM.}

\item{svm_iters}{The number of iteration in SVM learning.}

\item{make_speclib}{Makes spectrum library from the search results of
\code{psmQ.txt}.}

\item{digits}{A non-negative integer; the number of decimal places to be
used. The default is 4.}

\item{...}{Not currently used.}
}
\value{
A list of complete PSMs in \code{psmC.txt}; a list of quality PSMs in
  \code{psmQ.txt}.
}
\description{
Database searches of MS/MS data (DDA).
}
\section{\code{Output columns}}{
 \code{system.file("extdata",
  "column_keys.txt", package = "mzion")} \cr
}

\section{\code{Notes}}{
 The annotation of protein attributes, including
  percent coverage, will be performed with \link[proteoQ]{normPSM} given that
  values will be affected with the combination of multiple PSM tables.

  The search is a two-way match: (a) a forward matching of theoretical values
  to experiment ones and (b) a backward matching of the experimental values
  to the theoretical ones. This allows the establishment of one-to-one
  correspondences between experiments and theoreticals. The correspondences
  are made available to users in files of \code{ion_matches_1.rds...} (nested
  form) and \code{list_table_1.rds...} etc. (flat form). To open the files,
  use \code{qs::qread(...)}. A more self-contained output can be made
  available at the TRUE of \code{add_ms2theos}, \code{add_ms2theos2},
  \code{add_ms2moverzs} and \code{add_ms2ints}.

  When there is no evidence to distinguish, e.g. distinct primary sequences
  of \code{P[EMPTY]EPTIDE} and \code{P[MTYPE]EPTIDE}, both will be reported
  by \code{mzion} and further kept by proteoQ. For peptides under the same
  primary sequence, the redundancy in the positions and/or neutral losses of
  \code{Anywhere} variable modifications are also kept in the outputs of
  \code{mzion} but removed with proteoQ.
}

\section{\code{FASTA}}{
 \link{load_fasta2} sets the values of \code{acc_type}
  and \code{acc_pattern}. \cr
}

\section{\code{Unimod}}{
 \link{table_unimods} summarizes
  \href{https://www.unimod.org/}{Unimod} into a table format. \cr\cr
  \link{find_unimod} finds the mono-isotopic mass, position, site and neutral
  losses of a modification \cr\cr \link{parse_unimod} parses a Unimod.
  \href{https://proteoq.netlify.app/post/mixing-data-at-different-tmt-plexes/}{For
   example}, the name tag of "TMT6plex" is common among TMT-6, -10 and -11
  while "TMTpro" is for TMT-16. Experimenters may use aliases of "TMT10plex",
  "TMT11plex" and "TMT16plex.\cr\cr \link{calc_unimod_compmass} calculates
  the composition masses of a Unimod \cr\cr \link{add_unimod} adds a Unimod
  entry. \cr\cr \link{remove_unimod} removes a Unimod entry \cr\cr
  \link{remove_unimod_title} removes a Unimod entry by title.
}

\section{\code{Visualization}}{
 \link{mapMS2ions} visualizes the MS2 ion
  ladders.
}

\section{\code{mzTab}}{
 \link{make_mztab} converts outputs from the mzion ->
  proteoQ pipeline to mzTab files.
}

\examples{
\dontrun{
## All examples are hypothetical
## (Users are responsible for supplying FASTA and peak lists in MGF or mzML)

# TMT-10plex
matchMS(
  fasta    = c("~/mzion/dbs/fasta/refseq/refseq_hs_2013_07.fasta",
               "~/mzion/dbs/fasta/refseq/refseq_mm_2013_07.fasta",
               "~/mzion/dbs/fasta/crap/crap.fasta"),
  acc_type = c("refseq_acc", "refseq_acc", "other"),
  max_miss = 2,
  quant    = "tmt10",
  fdr_type = "protein",
  out_path = "~/mzion/examples",
)

# TMT-16plex, phospho
matchMS(
  fixedmods = c("TMTpro (N-term)", "TMTpro (K)", "Carbamidomethyl (C)"),
  varmods   = c("Acetyl (Protein N-term)", "Oxidation (M)",
                "Deamidated (N)", "Phospho (S)", "Phospho (T)",
                "Phospho (Y)", "Gln->pyro-Glu (N-term = Q)"),
  locmods   = c("Phospho (S)", "Phospho (T)", "Phospho (Y)"),
  quant     = "tmt16",
  fdr_type  = "psm",
  out_path  = "~/mzion/examples",
)

# TMT-18plex
matchMS(
  fixedmods = c("TMTpro (N-term)", "TMTpro (K)", "Carbamidomethyl (C)"),
  varmods   = c("Acetyl (Protein N-term)", "Oxidation (M)",
                "Deamidated (N)", "Deamidated (Q)",
                "Gln->pyro-Glu (N-term = Q)"),
  quant     = "tmt18",
  out_path  = "~/mzion/examples",
)

# Bruker's PASEF
matchMS(
  fixedmods = c("Carbamidomethyl (C)"),
  varmods   = c("Acetyl (Protein N-term)", "Oxidation (M)",
                "Deamidated (N)"),
  ppm_ms1   = 25,
  ppm_ms2   = 40,
  quant     = "none",
  fdr_type  = "protein",
  out_path  = "~/mzion/examples",
)

# Wrapper of matchMS(enzyme = noenzyme, ...) without sectional searches
#   by ranges of peptide lengths
matchMS_NES(
  fasta    = c("~/mzion/dbs/fasta/refseq/refseq_hs_2013_07.fasta",
               "~/mzion/dbs/fasta/refseq/refseq_mm_2013_07.fasta",
               "~/mzion/dbs/fasta/crap/crap.fasta"),
  acc_type = c("refseq_acc", "refseq_acc", "other"),
  quant    = "tmt10",
  fdr_type = "protein",
  out_path = "~/mzion/examples",
)


# Custom Unimod (Oxi+Carbamidomethyl)
# (see also calc_unimod_compmass)
add_unimod(header      = c(title       = "Oxi+Carbamidomethyl",
           full_name   = "Oxidation and iodoacetamide derivative"),
           specificity = c(site        = "M",
                           position    = "Anywhere"),
           delta       = c(mono_mass   = "73.016379",
                           avge_mass   = "73.0507",
                           composition = "H(3) C(2) N O(2)"),
           neuloss     = c(mono_mass   = "63.998285",
                           avge_mass   = "64.1069",
                           composition = "H(4) C O S"))

matchMS(
  fixedmods = c("TMT6plex (N-term)", "TMT6plex (K)", "Carbamidomethyl (C)"),
  varmods   = c("Acetyl (Protein N-term)", "Oxidation (M)", "Deamidated (N)",
                "Oxi+Carbamidomethyl (M)"),
  quant    = "tmt10",
)


## Stable isotope-labeled K and R (not SILAC mixtures)
# Anywhere K8, R10
matchMS(
  fixedmods = c("Carbamidomethyl (C)"),
  varmods   = c("Acetyl (Protein N-term)", "Oxidation (M)", "Deamidated (N)",
                "Label:13C(6)15N(2) (K)", "Label:13C(6)15N(4) (R)"),
  quant     = "none",
)

# K8, R10 + TMT10
matchMS(
  fixedmods = c("TMT6plex (N-term)", "TMT10plex+K8 (K)", "Carbamidomethyl (C)"),
  varmods   = c("Acetyl (Protein N-term)", "Oxidation (M)", "Deamidated (N)",
                "R10 (R)"),
  quant     = "tmt10",
)


#######################################
# SILAC
#######################################

## 1. heavy and light mixed into one sample (classical SILAC)
# (i) K8R10
matchMS(
  fixedmods = c("Carbamidomethyl (C)"),
  varmods   = c("Acetyl (Protein N-term)", "Oxidation (M)", "Deamidated (N)",
                "Gln->pyro-Glu (N-term = Q)"),
  silac_mix = list(base  = c(fixedlabs = NULL, varlabs = NULL),
                   K8R10 = c(fixedlabs = c("Label:13C(6)15N(2) (K)",
                                           "Label:13C(6)15N(4) (R)"),
                             varlabs   = NULL)),
  ...
  )


# (ii) base: unlabeled; grpC: 13C; grpN: 15N
# (example Dong-Ecoli-QE, Nat. Biotech. 2018, 36, 1059-1061)
matchMS(
  fixedmods = c("Carbamidomethyl (C)"),
  varmods   = c("Acetyl (Protein N-term)", "Oxidation (M)", "Deamidated (N)",
                "Gln->pyro-Glu (N-term = Q)"),

  silac_mix = list(base = c(fixedlabs = NULL, varlabs   = NULL),

                   grpC = c(fixedlabs = c("Label:13C(3) (A)", "Label:13C(6) (R)",
                                          "Label:13C(4) (N)", "Label:13C(4) (D)",
                                          "Label:13C(3) (C)", "Label:13C(5) (E)",
                                          "Label:13C(5) (Q)", "Label:13C(2) (G)",
                                          "Label:13C(6) (H)", "Label:13C(6) (I)",
                                          "Label:13C(6) (L)", "Label:13C(6) (K)",
                                          "Label:13C(5) (M)", "Label:13C(9) (F)",
                                          "Label:13C(5) (P)", "Label:13C(3) (S)",
                                          "Label:13C(4) (T)", "Label:13C(11) (W)",
                                          "Label:13C(9) (Y)", "Label:13C(5) (V)"),
                            varlabs = c("Label:13C(2) (Protein N-term)")),

                   grpN = c(fixedlabs = c("Label:15N(1) (A)", "Label:15N(4) (R)",
                                          "Label:15N(2) (N)", "Label:15N(1) (D)",
                                          "Label:15N(1) (C)", "Label:15N(1) (E)",
                                          "Label:15N(2) (Q)", "Label:15N(1) (G)",
                                          "Label:15N(3) (H)", "Label:15N(1) (I)",
                                          "Label:15N(1) (L)", "Label:15N(2) (K)",
                                          "Label:15N(1) (M)", "Label:15N(1) (F)",
                                          "Label:15N(1) (P)", "Label:15N(1) (S)",
                                          "Label:15N(1) (T)", "Label:15N(2) (W)",
                                          "Label:15N(1) (Y)", "Label:15N(1) (V)"),
                            varlabs = c("Label:15N(-1) (N)",
                                        "Label:15N(-1) (N-term = Q)"))),
  ...)


# (iii) labeled base
# (first to add exemplary K4 Unimod if not yet available)
K4 <- calc_unimod_compmass("2H(4) H(-4)")
mono_mass <- K4$mono_mass
avge_mass <- K4$avge_mass

add_unimod(header      = c(title       = "K4",
                           full_name   = "Heavy lysine 2H(4) H(-4)"),
           specificity = c(site        = "K",
                           position    = "Anywhere"),
           delta       = c(mono_mass   = "4.025108",
                           avge_mass   = "4.02464",
                           composition = "2H(4) H(-4)"),
           neuloss     = c(mono_mass   = "0",
                           avge_mass   = "0",
                           composition = "0"))

matchMS(
  silac_mix = list(base   = c(fixedlabs = c("K4 (K)"), varlabs = NULL),
                   median = c(fixedlabs = c("K6 (K)", "R6 (R)"), varlabs = NULL),
                   heavy  = c(fixedlabs = c("K8 (K)", "R10 (R)"), varlabs = NULL)),
  ...
)


## 2. Heavy and light in separate samples
#  (toy examples assessing the technical quality of SILAC)

# MGFs of light and heavy samples under separate folders;
# Heavy modifications being fixedmods

# (i) SILAC but low throughput since no sample mixing
matchMS(
  par_groups = list(
    light = list(mgf_path  = "~/mzion/my_project/mgf/light",
                 fixedmods = "Carbamidomethyl (C)"),
    heavy = list(mgf_path  = "~/mzion/my_project/mgf/heavy",
                 fixedmods = c("Carbamidomethyl (C)", "K8 (K)", "R10 (R)"))
  ),
  quant = "none",
  ...
)

}
}
