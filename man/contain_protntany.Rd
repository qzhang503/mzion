% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/dispatch.R
\name{contain_protntany}
\alias{contain_protntany}
\alias{contain_anyntany}
\alias{contain_protctany}
\alias{contain_anyctany}
\title{Checks if variable modifications are on \code{Protein N-term}.}
\usage{
contain_protntany(vmods, posns, len)

contain_anyntany(vmods, posns, len)

contain_protctany(vmods, posns, len)

contain_anyctany(vmods, posns, len)
}
\arguments{
\item{vmods}{A named list of variable modifications. See also
\link{find_protntsite} for examples of \code{vmods}.}

\item{posns}{The position (e.g., \code{Protein N-term}, \code{Anywhere},
etc.) of \code{vmods}. The argument can be obtained from \code{vmods} but
passed as a parameter for vectorization.}

\item{len}{The count of \code{vmods} (passed as a parameter for
vectorization).}
}
\description{
Flowchart (2-nt): Acetyl (Protein N-term)

Flowchart (4-nt): Acetyl (N-term)

Flowchart (2-ct): Amidated (Protein C-term)

Flowchart (4-ct): Amidated (C-term)
}
\examples{
\donttest{
library(mzion)

## `Acetyl (Protein N-term)`
sites <- list(`Acetyl (Protein N-term)` = "N-term", 
              `Oxidation (M)` = "M", 
              `Deamidated (N)` = "N")
positions <- c("Protein N-term", "Anywhere", "Anywhere")
vmods <- purrr::map2(sites, positions, ~ setNames(.x, .y))

vmods <- unname(vmods)
vmods <- unlist(vmods, recursive = FALSE, use.names = TRUE)
posns <- names(vmods)

mzion:::contain_protntany(vmods, posns, length(vmods))
}
\donttest{
library(mzion)

## `Acetyl (N-term)`
sites <- list(`Acetyl (N-term)` = "N-term", 
              `Oxidation (M)` = "M", 
              `Deamidated (N)` = "N")
positions <- c("Any N-term", "Anywhere", "Anywhere")
vmods <- purrr::map2(sites, positions, ~ setNames(.x, .y))

vmods <- unname(vmods)
vmods <- unlist(vmods, recursive = FALSE, use.names = TRUE)
posns <- names(vmods)

mzion:::contain_anyntany(vmods, posns, length(vmods))
}
\donttest{
library(mzion)

## `Amidated (Protein C-term)`
sites <- list(`Amidated (Protein C-term)` = "C-term", 
              `Oxidation (M)` = "M", 
              `Deamidated (N)` = "N")
positions <- c("Protein C-term", "Anywhere", "Anywhere")
vmods <- purrr::map2(sites, positions, ~ setNames(.x, .y))

vmods <- unname(vmods)
vmods <- unlist(vmods, recursive = FALSE, use.names = TRUE)
posns <- names(vmods)

mzion:::contain_protctany(vmods, posns, length(vmods))
}
\donttest{
library(mzion)

## `Amidated (C-term)`
sites <- list(`Amidated (C-term)` = "C-term", 
              `Oxidation (M)` = "M", 
              `Deamidated (N)` = "N")
positions <- c("Any C-term", "Anywhere", "Anywhere")
vmods <- purrr::map2(sites, positions, ~ setNames(.x, .y))

vmods <- unname(vmods)
vmods <- unlist(vmods, recursive = FALSE, use.names = TRUE)
posns <- names(vmods)

mzion:::contain_anyctany(vmods, posns, length(vmods))
}
}
